def mainUR3():

  #Global Parameters
  global blend_radius_m = 0.001
  global separator_count=1

  ##############################################################################################################################
  ##############################################################################################################################
  ##################################################### STATES & FUNCTIONS #####################################################
  ##############################################################################################################################
  ##############################################################################################################################

  #######################################################
  ############### FOO_1 SET DESIRED SPEED ###############
  #######################################################

  def set_Speed(vel_ms, vel_rads, acel_ms, acel_rads ): 
    #default: speed_ms = 0.05 speed_rads = 0.75 accel_mss = 3 accel_radss = 1.2 
    global speed_ms = vel_ms
    global speed_rads = vel_rads
    global accel_mss = acel_ms
    global accel_radss = acel_rads
  end

  #######################################################
  ############# FOO_2 WRITE IN REGISTER INT #############
  #######################################################

  def write_state_int(register, value):
    write_output_integer_register(register, value)
    sleep(0.1)
  end

  #######################################################
  ############# FOO_3 READ IN REGISTER INT ##############
  #######################################################

  def read_state_int(register):
    while (read_input_integer_register(register) ==   -1  ):	  	  
      sync()
    end
    return(read_input_integer_register(register))
  end

  #######################################################
  ############# FOO_4 INITIALIZE REGISTER ###############
  #######################################################

  def init_register(register0, register1, register2, value):
    write_state_int(register0, value)
    write_state_int(register1, value)
    write_state_int(register2, value)
  end

  #######################################################
  ################ FOO_5 RESET REGISTER #################
  #######################################################

  def reset_register(register0, register1, register2, value):
    write_state_int(register0, value)
    write_state_int(register1, value)
    write_state_int(register2, value)
    write_state_int(register0, 10)
    write_state_int(register1, 10)
    write_state_int(register2, 10)
  end

  #######################################################
  ############### FOO_6 INITIALIZE STATUS ###############
  #######################################################

  def init_status(register0, register1, register2):
    global status0=read_state_int(register0)
    global status1=read_state_int(register1)
    global status2=read_state_int(register2)
  end

  #######################################################
  ######## FOO_7 CHECK STATUS RECEIVED FROM PLC #########
  #######################################################

  def CheckStatus(state):

    if (status0==state and status1==state and status2==state or status0==state and status1==state and status2!=state or status0==state and status1!=state and
     status2==state or status0!=state and status1==state and status2==state):
      return True
    else:
      return False
    end
  end

  ##############################################
  ############### STATE_0 HOMING ###############
  ##############################################

  def UR3Home():
        
    init_register(3,4,5,2)
    gripkit_easy_enable() #ESTO SE DEBE REALIZAR EN LA MARCHA DE PREPARACIÃ“N (ESTADO_10)
    movej([3.054326, -2.000864, 1.487369, -1.057302, -1.570796, -0.000000],accel_radss,speed_rads,0,blend_radius_m)
    reset_register(3,4,5,1)

  end

  #########################################################################
  ############### STATE_1 COLLECT SEPARATOR FROM REPOSITORY ###############
  #########################################################################

  ### SUBPROGRAMMS ###
      
  #Depending on the entry value, which is the separator number that we're going to pull out, we positionate our control variables on the 5x3 matrix
  def CheckColumn(n_separator, column):
    if (n_separator==1 or n_separator==4 or n_separator==7 or n_separator==10 or n_separator==13):
      column=0  
    elif (n_separator==2 or n_separator==5 or n_separator==8 or n_separator==11 or n_separator==14):
      column=1
    else:
      column=2
    end
    return column
  end
      
  def CheckRow(n_separator, row):
    if (n_separator==1 or n_separator==2 or n_separator==3):
      row=0     
    elif (n_separator==4 or n_separator==5 or n_separator==6):
      row=1
    elif (n_separator==7 or n_separator==8 or n_separator==9):
      row=2
    elif (n_separator==10 or n_separator==11 or n_separator==12):
      row=3
    else:
      row=4
    end
    return row
  end
    
  #Select based on the column the reference point
  def GripSeparator(p1, p2, p3, vertical_dist, column, row):
    if(column==0):
      movej(pose_add(p1,p[ 0.0, 0.0, 0.07378, 0.0, 0.0, 0.0]), accel_radss,speed_rads,0,blend_radius_m) #maximum Z high is 0.224970
      movel(pose_add(p1, p[ 0.0, 0.0, -(row*vertical_dist), 0.0, 0.0, 0.0]),accel_mss,speed_ms,0,blend_radius_m)
    elif (column==1):
      movej(pose_add(p2,p[ 0.0, 0.0, 0.07223, 0.0, 0.0, 0.0]), accel_radss,speed_rads,0,blend_radius_m) #maximum Z high is 0.224970
      movel(pose_add(p2, p[ 0.0, 0.0, -(row*vertical_dist), 0.0, 0.0, 0.0]),accel_mss,speed_ms,0,blend_radius_m)
    else:
      movej(pose_add(p3,p[ 0.0, 0.0, 0.07232, 0.0, 0.0, 0.0]), accel_radss,speed_rads,0,blend_radius_m) #maximum Z high is 0.224970
      movel(pose_add(p3, p[ 0.0, 0.0, -(row*vertical_dist), 0.0, 0.0, 0.0]),accel_mss,speed_ms,0,blend_radius_m)
    end
    gripkit_easy_grip()
  end
      
  #Separator lift function
  def LiftSeparator(p1,p2,p3,column):
    if(column==0):
      movel(pose_add(p1,p[ 0.0, 0.0, 0.07378, 0.0, 0.0, 0.0]), accel_mss,speed_ms,0,blend_radius_m) #maximum Z high is 0.224970
    elif (column==1):
      movel(pose_add(p2,p[ 0.0, 0.0, 0.07223, 0.0, 0.0, 0.0]), accel_mss,speed_ms,0,blend_radius_m) #maximum Z high is 0.224970
    else:
      movel(pose_add(p3,p[ 0.0, 0.0, 0.07232, 0.0, 0.0, 0.0]), accel_mss,speed_ms,0,blend_radius_m) #maximum Z high is 0.224970
    end
  end

  #function that checks if the separator has been taken by the gripper
  def CheckState():
    if(gripkit_easy_get_state()==3):
      return True
    else:
      return False
    end
  end  

  ##### STATE_1 MAIN #####
  def SeparatorLoop(n_separator):

    init_register(3,4,5,12)
    vertical_dist = 0.048
      
    p1=p[ 430.64/1000, 150.43/1000,  154.75/1000, 2.3, -2.141, 0.0]
    p2=p[ 434.94/1000, 1.81/1000,  152.74/1000, 2.234, -2.229, 0.019]
    p3=p[ 436.16/1000, -96.79/1000,  152.65/1000, 2.239, -2.236, 0.061]
      
    column=0 #Variable to know which column to go
    row=0    #Variable to know whick row to go
      

    column=CheckColumn(n_separator, column)
    row=CheckRow(n_separator, row)
    GripSeparator(p1, p2, p3, vertical_dist, column, row)  
    var=CheckState()   #check if the tool has gripped the separator correctly
        
    while var!=True: #loop that is carried out as long as it is not possible to take out a separator. If the value of the maximum number of separators that we have is
    #exceeded, the loop ends regardless of whether we have removed a separator or not and returns to Home (the separator buffer is empty)
      gripkit_easy_release()
      LiftSeparator(p1, p2, p3, column)
      n_separator=n_separator+1
      if(n_separator>=16):
        break
      end
      column=CheckColumn(n_separator, column)
      row=CheckRow(n_separator, row)
      GripSeparator(p1, p2, p3, vertical_dist, column, row)
      var=CheckState()
    end
  
    LiftSeparator(p1, p2, p3, column)
    if(n_separator>=16):
      n_separator=1
      UR3Home()
    end
    reset_register(3,4,5,11)
    return n_separator
       
    #This function call has to be:
    # separator_count = SeparatorLoop(separator_count)
    #the function updates the value of the counter if there has been an error and has had
    #to take the next one. If there hasn't been any problems, return the same counter again
    
  end
  

  ########################################################################
  ############### STATE_2 MOVING ABOVE THE ELECTRIC CABLES ###############
  ########################################################################

  def UR3Move():
  
    init_register(3,4,5,20)
    movej([2.998650, -1.021017, 0.738274, -1.714088, -1.478468, -0.036128],accel_radss,speed_rads,0,blend_radius_m)
    movej([2.978753, -1.229933, 0.856782, -1.866280, -1.470963, -0.054454],accel_radss,speed_rads,0,blend_radius_m)
    movej([2.589497, -1.708628, 1.653841, -3.255535, -0.958561, 0.164599],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.130247, -1.492780, 0.402648, -3.655418, -1.605528, 0.017279],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.258313, -1.062730, -1.256914, -3.325443, -1.636010, -0.055664],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.278513, -0.904607, -2.248904, -3.021830, -1.492790, -0.008363],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.262023, -0.967804, -2.228526, -2.979129, -1.509191, 1.564254],accel_radss,speed_rads,0,blend_radius_m)
    reset_register(3,4,5,21)
        
  end
  
  ###################################################################
  ############### STATE_3 DEPOSIT IN THE WORK AREA  #################
  ###################################################################

  def UR3DropBench():
    
    init_register(3,4,5,30)
    movej([3.885552, -1.409786, -2.235269, -2.656987, -0.822353, 1.576655],accel_radss,speed_rads,0,blend_radius_m)
    #movel([3.876904, -2.012729, -2.493867, -1.776589, -0.835485, 1.570796],accel_mss,speed_ms,0,blend_radius_m)
    movel(p[-395.48/1000, -18.43/1000,77.61/1000 , 0.058, -1.522, 0.020],accel_mss,speed_ms,0,blend_radius_m)
    reset_register(3,4,5,31)

  end

  ###########################################################################################
  ############### STATE_4 ROTATE SEPARATOR AND DEPOSIT BACK IN THE WORK AREA  ###############
  ###########################################################################################

  def UR3RotateSeparator():

    init_register(3,4,5,40)
    movel([3.885552, -1.409786, -2.235269, -2.656987, -0.822353, 1.576655],accel_mss,speed_ms,0,blend_radius_m)
    movej([3.262021, -0.967785, -2.228611, -3.054326, -1.570796, 1.570796],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.248407, -1.027916, -2.205811, -3.016994, -1.584413, 4.712848],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.885666, -1.409790, -2.235272, -2.656978, -0.822123, 4.713486],accel_radss,speed_rads,0,blend_radius_m)
     movel(p[-395.48/1000,-17.31/1000 ,78.71/1000 , 2.178,0.052 ,-2.249 ],accel_mss,speed_ms,0,blend_radius_m)
    #movel([3.891802, -1.959047, -2.485370, -1.857349, -0.807927, 4.712484],accel_mss,speed_ms,0,blend_radius_m)
    reset_register(3,4,5,41)
    
  end

  ###########################################################################################
  ############### STATE_5 ROTATED SEPARATOR RISES TO THE INSTALLATION AREA  #################
  ###########################################################################################

  def UR3RotateDropCable():
    
    init_register(3,4,5,50)
    movel([3.885666, -1.409790, -2.235272, -2.656978, -0.822123, 4.713486],accel_mss,speed_ms,0,blend_radius_m)
    movej([3.726487, -1.486412, -1.655221, 0.000506, 0.960078, 1.557563],accel_radss,speed_rads,0,blend_radius_m)
    #movel([3.725871, -1.589132, -1.063358, -0.488654, 0.961430, 1.558304],accel_mss,speed_ms,0,blend_radius_m)
    movel(p[-430.61/1000,-6.48/1000 ,595.35/1000 ,2.211 ,0.056 ,-2.205 ],accel_mss,speed_ms,0,blend_radius_m)    
reset_register(3,4,5,51)
   
  end
  
  ###########################################################################################
  ############### STATE_6 SEPARATOR RISES TO THE INSTALLATION AREA NORMALLY  ################
  ###########################################################################################

  def UR3DropCable():

    init_register(3,4,5,60)
    movel([3.885552, -1.409786, -2.235269, -2.656987, -0.822353, 1.576655],accel_mss,speed_ms,0,blend_radius_m)
    movej([3.754317, -1.506105, -1.849585, 0.214141, 0.945161, -1.583733],accel_radss,speed_rads,0,blend_radius_m)
    #movel([3.690388, -1.599182, -1.031013, -0.511643, 1.022000, -1.570668],accel_mss,speed_ms,0,blend_radius_m)
   movel(p[-430.31/1000,-15.18/1000 ,591.52/1000 ,0.058 ,-1.573 ,0.040 ],accel_mss,speed_ms,0,blend_radius_m)
    reset_register(3,4,5,61)
    
  end

  ###########################################################################################
  ########## STATE_7 FROM THE INSTALLATION AREA IT RETURNS TO HOME. END OF CICLE  ###########
  ###########################################################################################

  def UR3Return():

    init_register(3,4,5,70)
    gripkit_easy_release()
    movel(p[-362.18/1000,-15.18/1000 ,591.52/1000 ,0.058 ,-1.573 ,0.040 ],accel_mss,speed_ms,0,blend_radius_m)
    movel(p[-362.18/1000,-15.18/1000 ,451.52/1000 ,0.058 ,-1.573 ,0.040 ],accel_mss,speed_ms,0,blend_radius_m)
    #movej([3.816544, -1.404091, -1.502819, -0.234683, 0.895845, -1.570796],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.816511, -1.409004, -2.225469, -0.257611, 0.895878, -1.570796],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.816511, -1.409004, -2.225469, -0.257611, -1.570796, -0.000000],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.054325, -2.211856, 1.125563, -1.308996, -1.570795, -0.000001],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.054326, -2.000864, 1.487369, -1.057302, -1.570796, -0.000000],accel_radss,speed_rads,0,blend_radius_m)
    reset_register(3,4,5,71)

  end
  

  ##############################################################################################################################
  ##############################################################################################################################
  ##################################################### MAIN PROGRAMME #########################################################
  ##############################################################################################################################
  ##############################################################################################################################

  set_tcp(p[0.000000, 0.000000, 0.105000, 0.000000, 0.000000, 0.000000])
  set_Speed(0.05, 0.75, 3, 1.2)
  #vel_ms, vel_rads, acel_ms, acel_rads
  #State-Machine
  while(True):
    init_status(0,1,2)

   if (CheckStatus(0)==True):
      set_Speed(0.05, 0.75, 3, 1.2)
      UR3Home()
   elif (CheckStatus(1)==True):
     separator_count = SeparatorLoop(separator_count)
   elif (CheckStatus(2)==True):
     set_Speed(0.05, 1.5,3 , 2)
     UR3Move()
   elif (CheckStatus(3)==True):
     set_Speed(0.05, 0.75, 3, 1.2)
     UR3DropBench()
   elif (CheckStatus(4)==True):
     set_Speed(0.05, 0.75, 3, 1.2)
     UR3RotateSeparator()
   elif (CheckStatus(5)==True):
     set_Speed(0.05, 0.75, 3, 1.2)
     UR3RotateDropCable()
   elif (CheckStatus(6)==True):
     set_Speed(0.05, 0.75, 3, 1.2)
     UR3DropCable()
   elif (CheckStatus(7)==True):
    set_Speed(0.05, 2, 3, 2.4)
     UR3Return()
     separator_count=separator_count+1    
   end
  end
end