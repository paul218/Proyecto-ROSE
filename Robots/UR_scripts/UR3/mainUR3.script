def mainUR3():

  #Global Parameters
  global blend_radius_m = 0.001
  global separator_count=1

  ##############################################################################################################################
  ##############################################################################################################################
  ##################################################### STATES & FUNCTIONS #####################################################
  ##############################################################################################################################
  ##############################################################################################################################

  #######################################################
  ############### FOO_1 SET DESIRED SPEED ###############
  #######################################################

  def set_Speed(vel_ms, vel_rads, acel_ms, acel_rads ): 
    #default: speed_ms = 0.05 speed_rads = 0.75 accel_mss = 3 accel_radss = 1.2 
    global speed_ms = vel_ms
    global speed_rads = vel_rads
    global accel_mss = acel_ms
    global accel_radss = acel_rads
  end

  #######################################################
  ############# FOO_2 WRITE IN REGISTER INT #############
  #######################################################

  def write_state_int(register, value):
    write_output_integer_register(register, value)
    sleep(0.1)
  end

  #######################################################
  ############# FOO_3 READ IN REGISTER INT ##############
  #######################################################

  def read_state_int(register):
    while (read_input_integer_register(register) ==   -1  ):	  	  
      sync()
    end
    return(read_input_integer_register(register))
  end

  #######################################################
  ############# FOO_4 INITIALIZE REGISTER ###############
  #######################################################

  def init_register(register0, register1, register2, value):
    write_state_int(register0, value)
    write_state_int(register1, value)
    write_state_int(register2, value)
  end

  #######################################################
  ################ FOO_5 RESET REGISTER #################
  #######################################################

  def reset_register(register0, register1, register2, value):
    write_state_int(register0, value)
    write_state_int(register1, value)
    write_state_int(register2, value)
    write_state_int(register0, 10)
    write_state_int(register1, 10)
    write_state_int(register2, 10)
  end

  #######################################################
  ############### FOO_6 INITIALIZE STATUS ###############
  #######################################################

  def init_status(register0, register1, register2):
    global status0=read_state_int(register0)
    global status1=read_state_int(register1)
    global status2=read_state_int(register2)
  end

  #######################################################
  ######## FOO_7 CHECK STATUS RECEIVED FROM PLC #########
  #######################################################

  def CheckStatus(state):

    if (status0==state and status1==state and status2==state or status0==state and status1==state and status2!=state or status0==state and status1!=state and
     status2==state or status0!=state and status1==state and status2==state):
      return True
    else:
      return False
    end
  end

  ##############################################
  ############### STATE_0 HOMING ###############
  ##############################################

  def UR3Home():
        
    init_register(3,4,5,300)
    gripkit_easy_enable() #ESTO SE DEBE REALIZAR EN LA MARCHA DE PREPARACIÃ“N (ESTADO_10)
    movej([3.094992, -1.810605, 1.908692, -1.919862, -1.570796, -1.570796],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.147352, -3.119602, 2.589370, -1.658063, -1.570796, -1.540951],accel_radss,speed_rads,0,blend_radius_m)
    reset_register(3,4,5,301)

  end

  #########################################################################
  ############### STATE_1 COLLECT SEPARATOR FROM REPOSITORY ###############
  #########################################################################

  ### SUBPROGRAMMS ###
      
  #Depending on the entry value, which is the separator number that we're going to pull out, we positionate our control variables on the 5x3 matrix
  def CheckColumn(n_separator, column):
    if (n_separator==1 or n_separator==4 or n_separator==7 or n_separator==10 or n_separator==13):
      column=0  
    elif (n_separator==2 or n_separator==5 or n_separator==8 or n_separator==11 or n_separator==14):
      column=1
    else:
      column=2
    end
    return column
  end
      
  def CheckRow(n_separator, row):
    if (n_separator==1 or n_separator==2 or n_separator==3):
      row=0     
    elif (n_separator==4 or n_separator==5 or n_separator==6):
      row=1
    elif (n_separator==7 or n_separator==8 or n_separator==9):
      row=2
    elif (n_separator==10 or n_separator==11 or n_separator==12):
      row=3
    else:
      row=4
    end
    return row
  end

  #function to start the gripping movements
  def StartingPoint():
    movej([3.094992, -1.810605, 1.908692, -1.919862, -1.570796, -1.570796],accel_radss,speed_rads,0,blend_radius_m) #From Home starting point to have no Collisions
  end
    
  #Select based on the column the reference point
  def GripSeparator(p1, p2, p3, vertical_dist, column, row):

    #Check Grip Status
    #If Grip is closed then open
    if (gripkit_easy_get_state()==2):
      gripkit_easy_release()      
    end

    if(column==0):
      movej(pose_add(p1,p[ 0.0, 0.0, 0.07645, 0.0, 0.0, 0.0]), accel_radss,speed_rads,0,blend_radius_m) #maximum Z high is 0.224970
      movel(pose_add(p1, p[ 0.0, 0.0, -(row*vertical_dist), 0.0, 0.0, 0.0]),accel_mss,speed_ms,0,blend_radius_m)
    elif (column==1):
      movej(pose_add(p2,p[ 0.0, 0.0, 0.07202, 0.0, 0.0, 0.0]), accel_radss,speed_rads,0,blend_radius_m) #maximum Z high is 0.224970
      movel(pose_add(p2, p[ 0.0, 0.0, -(row*vertical_dist), 0.0, 0.0, 0.0]),accel_mss,speed_ms,0,blend_radius_m)
    else:
	  movej([d2r(162.98), d2r(-42.27), d2r(20), d2r(-65.67),d2r(-89.10), d2r(249.28)], accel_radss,speed_rads,0,blend_radius_m)
      movej(pose_add(p3,p[ 0.0, 0.0, 0.07012, 0.0, 0.0, 0.0]), accel_radss,speed_rads,0,blend_radius_m) #maximum Z high is 0.224970
      movel(pose_add(p3, p[ 0.0, 0.0, -(row*vertical_dist), 0.0, 0.0, 0.0]),accel_mss,speed_ms,0,blend_radius_m)
    end
    gripkit_easy_grip()
    set_payload(2.25, [-3/1000,-2/1000,70/1000]) #adjust payload to new weight
  end
      
  #Separator lift function
  def LiftSeparator(p1,p2,p3,column):
    if(column==0):
      movel(pose_add(p1,p[ 0.0, 0.0, 0.07645, 0.0, 0.0, 0.0]), accel_mss,speed_ms,0,blend_radius_m) #maximum Z high is 0.224970
    elif (column==1):
      movel(pose_add(p2,p[ 0.0, 0.0, 0.07202, 0.0, 0.0, 0.0]), accel_mss,speed_ms,0,blend_radius_m) #maximum Z high is 0.224970
    else:
      movel(pose_add(p3,p[ 0.0, 0.0, 0.07012, 0.0, 0.0, 0.0]), accel_mss,speed_ms,0,blend_radius_m) #maximum Z high is 0.224970
    end
  end

  #function to finish the movement and prepare for the next state
  def TakenDone():
    movel([2.692357, -1.636750, 1.446014, -1.340110, -1.559653, -2.088373],accel_mss,speed_ms,0,blend_radius_m)
  end

  #function that checks if the separator has been taken by the gripper
  def CheckGripState():
    if(gripkit_easy_get_state()==3):
      return True
    else:
      return False
    end
  end  

  ##### STATE_1 MAIN #####
  def SeparatorLoop(n_separator):

    init_register(3,4,5,310)
    vertical_dist = 0.048
      
    p1=p[ 301.7/1000, 2.47/1000,  148.52/1000, -3.111, -0.106, 0.047]
    p2=p[ 399.03/1000, 2.47/1000,  152.95/1000, 3.168, 0.108, -0.048]
    p3=p[ 501.23/1000, -1.5/1000,  154.85/1000, 3.160, 0.047, -0.023]
      
    column=0 #Variable to know which column to go
    row=0    #Variable to know whick row to go
      

    column=CheckColumn(n_separator, column)
    row=CheckRow(n_separator, row)
    StartingPoint()
    GripSeparator(p1, p2, p3, vertical_dist, column, row)  
    var=CheckGripState()   #check if the tool has gripped the separator correctly
        
    while var!=True: #loop that is carried out as long as it is not possible to take out a separator. If the value of the maximum number of separators that we have is
    #exceeded, the loop ends regardless of whether we have removed a separator or not and returns to Home (the separator buffer is empty)
      gripkit_easy_release()
      LiftSeparator(p1, p2, p3, column)
      n_separator=n_separator+1
      if(n_separator>=16):
        break
      end
      column=CheckColumn(n_separator, column)
      row=CheckRow(n_separator, row)
      GripSeparator(p1, p2, p3, vertical_dist, column, row)
      var=CheckGripState()
    end
  
    LiftSeparator(p1, p2, p3, column)
    TakenDone()
    if(n_separator>=16):
      n_separator=1
      UR3Home()
    end
    reset_register(3,4,5,311)
    return n_separator
       
    #This function call has to be:
    # separator_count = SeparatorLoop(separator_count)
    #the function updates the value of the counter if there has been an error and has had
    #to take the next one. If there hasn't been any problems, return the same counter again
    
  end
  

  ########################################################################
  ############### STATE_2 MOVING ABOVE THE ELECTRIC CABLES ###############
  ########################################################################

  def UR3Move():
  
    init_register(3,4,5,320)
    movej([2.988822, -1.767962, 1.620961, -1.839686, -1.556895, -0.155324],accel_radss,speed_rads,0,blend_radius_m)
    movej([2.979812, -1.765817, 1.618682, -2.417750, -1.544040, -0.150884],accel_radss,speed_rads,0,blend_radius_m)
    movej([2.589497, -1.708628, 1.653841, -3.255535, -0.958561, 0.164599],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.130248, -1.388060, -0.138405, -3.655418, -1.605528, 0.017279],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.116111, -1.164833, -0.997630, -3.377038, -1.631185, -0.044331],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.555252, -1.496725, -1.310180, -3.440421, -1.734984, -0.036673],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.715545, -1.455491, -1.766061, -3.218178, -1.351089, 1.570397],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.645993, -1.483530, -2.394068, -2.356194, -1.073377, 1.556485],accel_radss,speed_rads,0,blend_radius_m)
    reset_register(3,4,5,321)
        
  end
  
  ###################################################################
  ############### STATE_3 DEPOSIT IN THE WORK AREA  #################
  ###################################################################

  def UR3DropBench():
    
    init_register(3,4,5,330)
    movej([4.006400, -1.510303, -2.593562, -2.126343, -0.722900, 1.482144],accel_radss,speed_rads,0,blend_radius_m)
	movel(p[-369.73/1000, -4.05/1000, -22.5/1000, 0.049, -1.546, -0.022], accel_mss, speed_ms, 0, blend_radius_m)
    #movel([4.006400, -2.819209, -2.513026, -0.897973, -0.722900, 1.482144],accel_mss,speed_ms,0,blend_radius_m)
    reset_register(3,4,5,331)

  end

  ###########################################################################################
  ############### STATE_4 ROTATE SEPARATOR AND DEPOSIT BACK IN THE WORK AREA  ###############
  ###########################################################################################

  def UR3RotateSeparator():

    init_register(3,4,5,340)
    movel([4.006400, -1.510303, -2.593562, -2.126343, -0.722900, 1.482144],accel_mss,speed_ms,0,blend_radius_m)
    movej([3.795340, -1.573014, -2.133618, -2.521679, -0.924609, 1.547197],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.795393, -1.573065, -2.133665, -2.521652, -0.924675, 4.618141],accel_radss,speed_rads,0,blend_radius_m)
    movel([4.016632, -1.510193, -2.601069, -2.110944, -0.702844, 4.618216],accel_mss,speed_ms,0,blend_radius_m)
    movel([4.016406, -2.820647, -2.519967, -0.881393, -0.703267, 4.618366],accel_mss,speed_ms,0,blend_radius_m)
    reset_register(3,4,5,341)
    
  end

  ###########################################################################################
  ############### STATE_5 ROTATED SEPARATOR RISES TO THE INSTALLATION AREA  #################
  ###########################################################################################

  def UR3RotateDropCable():
    
    init_register(3,4,5,350)
    movel([4.016632, -1.510193, -2.601069, -2.110944, -0.702844, 4.618216],accel_mss,speed_ms,0,blend_radius_m)
    movej([3.692001, -1.540558, -1.606126, -3.107601, -1.029469, 4.652141],accel_radss,speed_rads,0,blend_radius_m)
    movel([3.692179, -1.570168, -1.310572, -3.373567, -1.029072, 4.651610],accel_mss,speed_ms,0,blend_radius_m)  
    reset_register(3,4,5,351)
   
  end
  
  ###########################################################################################
  ############### STATE_6 SEPARATOR RISES TO THE INSTALLATION AREA NORMALLY  ################
  ###########################################################################################

  def UR3DropCable():

    init_register(3,4,5,360)
    #movel([4.006400, -1.510303, -2.593562, -2.126343, -0.722900, 1.482144],accel_mss,speed_ms,0,blend_radius_m)
	movel(p[-369.73/1000, -4.05/1000, 141.75/1000, 0.049, -1.546, -0.022], accel_mss, speed_ms, 0, blend_radius_m)
    movej(p[ -432.20/1000, -3.97/1000,  311.159/1000, 0.061, -1.565, -0.020],accel_radss,speed_rads,0,blend_radius_m)
    movel(p[ -432.20/1000, -3.97/1000,  372.71/1000, 0.061, -1.565, -0.020],accel_mss,speed_ms,0,blend_radius_m)
	movel(p[ -432.20/1000, -0.23/1000,  420.7/1000, 0.061, -1.565, -0.020],accel_mss,speed_ms,0,blend_radius_m)#pos nave cables
    reset_register(3,4,5,361)
    
  end



  ###########################################################################################
  ########## STATE_7 FROM THE INSTALLATION AREA IT RETURNS TO HOME. END OF CICLE  ###########
  ###########################################################################################

  def UR3Return():

    init_register(3,4,5,370)
    gripkit_easy_release()
    movej(p[ -397.55/1000, 20.48/1000,  372.71/1000, 0.061, -1.565, -0.020],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.905349, -1.325927, -1.537286, -2.346595, -0.807913, 1.553518],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.054325, -2.211856, 1.125563, -1.308996, -1.570795, -0.000001],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.054326, -1.758070, 1.649162, -1.483530, -1.570796, 0.000000],accel_radss,speed_rads,0,blend_radius_m)
    UR3Home()
    reset_register(3,4,5,371)

  end


  
  
  ###########################################################################################################################
  ########## STATE_8 FROM THE INSTALLATION AREA IT RETURNS TO HOME WHEN SEPARATOR HAS BEEN ROTATED. END OF CICLE  ###########
  ###########################################################################################################################

  def UR3ReturnRotated():

    init_register(3,4,5,380)
    gripkit_easy_release()
    movel([3.763104, -1.402023, -1.464506, -3.428350, -0.949983, 4.717974],accel_mss,speed_ms,0,blend_radius_m)
    movej([3.905349, -1.325927, -1.537286, -2.346595, -0.807913, 1.553518],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.054325, -2.211856, 1.125563, -1.308996, -1.570795, -0.000001],accel_radss,speed_rads,0,blend_radius_m)
    movej([3.054326, -1.758070, 1.649162, -1.483530, -1.570796, 0.000000],accel_radss,speed_rads,0,blend_radius_m)
    UR3Home()
    reset_register(3,4,5,381)

  end

  ##############################################################################################################################
  ##############################################################################################################################
  ##################################################### MAIN PROGRAMME #########################################################
  ##############################################################################################################################
  ##############################################################################################################################

  set_tcp(p[0.000000, 0.000000, 0.105000, 0.000000, 0.000000, 0.000000])
  set_payload(0.87, [-6/1000,-3/1000,48/1000])
  set_Speed(0.05, 0.75, 3, 1.2)
  #vel_ms, vel_rads, acel_ms, acel_rads
  #State-Machine
  while(True):
    init_status(0,1,2)

   if (CheckStatus(30)==True):
     set_Speed(0.05, 0.75, 3, 1.2)
     UR3Home()
   elif (CheckStatus(31)==True):
     separator_count = SeparatorLoop(separator_count)
   elif (CheckStatus(32)==True):
     set_Speed(0.05, 1.5,3 , 2)
     UR3Move()
   elif (CheckStatus(33)==True):
     set_Speed(0.05, 0.75, 3, 1.2)
     UR3DropBench()
   elif (CheckStatus(34)==True):
     set_Speed(0.05, 0.75, 3, 1.2)
     UR3RotateSeparator()
   elif (CheckStatus(35)==True):
     set_payload(1.54, [4/1000,0,70/1000]) #adjust payload to new weight
     set_Speed(0.05, 0.75, 3, 1.2)
     UR3RotateDropCable()
   elif (CheckStatus(36)==True):
     set_payload(1.54, [4/1000,0,70/1000]) #adjust payload to new weight
     set_Speed(0.05, 0.75, 3, 1.2)
     UR3DropCable()
   elif (CheckStatus(37)==True):
     set_payload(0.87, [-6/1000,-3/1000,48/1000]) #adjust payload to empty weight
     set_Speed(0.05, 2, 3, 2.4)
     UR3Return()
     separator_count=separator_count+1
   elif (CheckStatus(38)==True):
     set_payload(0.87, [-6/1000,-3/1000,48/1000]) #adjust payload to empty weight
     set_Speed(0.05, 2, 3, 2.4)
     UR3ReturnRotated()
     separator_count=separator_count+1     
   end
  end
end